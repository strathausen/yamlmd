// Generated by CoffeeScript 1.10.0

/*

Loading yaml-markdowny files from disk into an article model

Creates properties content and metadata from the yaml file

@author Johann Philipp Strathausen <strathausen@gmail.com>
 */
var YamlMd, YamlMdDocument, _, hljs, mapStream, md, yaml,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

_ = require('underscore');

yaml = require('yaml');

md = require('marked');

hljs = require('highlight.js');

md.setOptions({
  highlight: function(code, lang) {
    var e, error;
    if (lang === 'js') {
      lang = 'javascript';
    }
    if (/coffee/.test(lang)) {
      lang = 'coffeescript';
    }
    if (!lang) {
      return code;
    }
    try {
      return hljs.highlight(lang, code).value;
    } catch (error) {
      e = error;
      return code;
    }
  }
});

mapStream = require('map-stream');

YamlMdDocument = (function() {
  function YamlMdDocument(defaults) {
    _.extend(this, defaults);
  }

  return YamlMdDocument;

})();

YamlMd = (function() {
  function YamlMd() {
    this.stream = bind(this.stream, this);
    this.readFile = bind(this.readFile, this);
  }

  YamlMd.prototype.parse = function(content, defaults) {
    var data, head, ref, tail, yamlDoc;
    if (defaults == null) {
      defaults = {};
    }
    ref = content.split('\n\n'), head = ref[0], tail = 2 <= ref.length ? slice.call(ref, 1) : [];
    yamlDoc = '---\n  ' + (head.replace(/\n/g, '\n  ')) + '\n';
    data = yaml["eval"](yamlDoc);
    data.html = md.parse(tail.join('\n\n'));
    return new YamlMdDocument(_.defaults(defaults, data));
  };

  YamlMd.prototype.readFile = function(fname, cb) {
    return fs.readFile(path.join(blog.dir, fname), 'utf8', (function(_this) {
      return function(err, content) {
        return cb(err, _this.parse(content, {
          id: fname
        }));
      };
    })(this));
  };

  YamlMd.prototype.stream = function(defaults) {
    return mapStream((function(_this) {
      return function(content, cb) {
        return cb(null, _this.parse(content.toString(), defaults));
      };
    })(this));
  };

  return YamlMd;

})();

module.exports = new YamlMd;
